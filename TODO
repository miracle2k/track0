Support referers.

When say a link tag defines a file as text/css, we could use this to save
us a potential HEAD request when the content type is needed.

Currently, urls returning error codes are ignored. We might want to implement
these as implicit default tests, i.e. -code>=400, such that a user may override
this using +code=404.

Consider a mode in which all redirects are saved as http-equiv=refresh
files. Possible via something like "@save +redirect".

Handling redirects: Consider having a mode where the source url (the url
doing the redirect) does not need to pass @follow. This would however
entail a HEAD request for every url encountered to determine that it is
a redirect.

Currently all redirects are saved under the target name. And argument can
be made that for temporary redirects, the source name should be used. The
problem is that this would be really unhelpful for things like a
download.php redirect. Possibly interesting things with looking at mimetpes
(say: seeing if they are the same) could work.

Think about how to handle content-disposition headers.

Currently updating a mirror looks at etags and last-modified, but does not
consider expires headers. Do this, possibly via a --trust-expires option.

Currently we can "--update" a mirror, which can be used to continue an
aborted mirror as well. However, this still requires a lot of HEAD requests
and a lot of ful GETs as well were a etags/last-modified are not supported.
A true continue would be able to restore based on the queue itself being
saved, or a non-HTTP replay of the action through known-links only.

Add wget-like host checking. Possibly we can also do some md5 hasing magic
to figure out if a www. host is the same.

Support reading cookies from browsers:
    http://pentesterscript.wordpress.com/2013/08/11/extract-data-from-chrome-database/
    http://www.guyrutenberg.com/2010/11/27/building-cookiejar-out-of-firefoxs-cookies-sqlite/

Support sitemaps - from robots.txt, and possibly without it.

Detect files deleted manually by the user. They are still in the database
and are considered to exist, but should instead be recognized as gone.

The generated index.html file is a mess with all the requisites. It should
probably only contain those files that were matched by non-requisite filters.
